{"version":3,"sources":["Kuna/KunaAPI.js","components/CandleChart/index.js","App.js","serviceWorker.js","index.js"],"names":["utcParse","dateFormat","timeFormat","numberFormat","format","ema20","ema","id","options","windowSize","merge","d","c","accessor","ema50","xScaleProvider","discontinuousTimeScaleProvider","inputDateAccessor","date","fitWidth","props","ys","calculatedData","realData","data","xScale","xAccessor","displayXAccessor","start","last","e","length","end","Math","max","style","paddingLeft","title","close","height","width","ratio","margin","left","right","top","bottom","type","seriesName","xExtents","yExtents","high","low","padding","axisAt","orient","ticks","yAccessor","stroke","itemType","edgeAt","fill","open","tooltipContent","label","value","currentItem","x","y","concat","map","each","filter","line","fontSize","App","className","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efbefc91.chunk.js","sourcesContent":["import { timeFormat, utcParse  } from 'd3-time-format'\n\nconst KUNA_API = 'https://kuna.io/api/v2'\nconst parseUnixTime = utcParse('%s')\nconst formatTimeFrame = (timeFrame = '1m') => {\n  if (timeFrame === '1m') {\n    return timeFormat('%Y-%m-%d %H:%M')\n  } else {\n    throw new Error(`formatTimeFrame(${timeFrame}) - unsupported period.`)\n  }\n}\n\n// contains OHLC objects\nlet candlesticks = []\n// contains the current candlestick OHLC\nlet candle = null\n// last time and price processed info - used to detect changes\nlet lastTickerTime = null\nlet lastTickerPrice = null\n\n// https://kuna.io/documents/api?lang=ua\nexport const startFetchingTickers =\n  async ({ market = 'btcuah', timeFrame = '1m', onData = (candle) => {} }) => {\n    const res = await fetch(`${KUNA_API}/tickers/${market}`)\n    let ticker = await res.json()\n    ticker.at = parseUnixTime(ticker.at)\n    const tickerTime = formatTimeFrame(timeFrame)(ticker.at)\n    const tickerPrice = Number(ticker.ticker.last)\n    if (lastTickerTime === tickerTime && lastTickerPrice === tickerPrice) {\n      return\n    }\n\n    if (lastTickerTime !== tickerTime) {\n      if (candle) {\n        onData({ ...candle })\n      }\n\n      // New timeframe started - create a new candlestick\n      candle = {\n        date: ticker.at,\n        open: tickerPrice,\n        high: tickerPrice,\n        low: tickerPrice,\n        close: tickerPrice\n      }\n      candlesticks.push(candle)\n      console.debug(`New time frame (${timeFrame}) started: `, candle)\n    } else if (lastTickerPrice !== tickerPrice) {\n      // Price changed - update current candlestick\n      candle.high = Math.max(candle.high, tickerPrice)\n      candle.low = Math.min(candle.low, tickerPrice)\n      candle.close = tickerPrice\n      console.debug(`Current time frame (${timeFrame}) updated: `, candle)\n    }\n    // Update last tracked values\n    lastTickerTime = tickerTime\n    lastTickerPrice = tickerPrice\n}\n","import React from 'react'\nimport { format } from 'd3-format'\nimport { timeFormat } from 'd3-time-format'\nimport { ChartCanvas, Chart } from 'react-stockcharts'\nimport {\n\tBarSeries,\n\tCandlestickSeries,\n\tLineSeries\n} from 'react-stockcharts/lib/series'\nimport { XAxis, YAxis } from 'react-stockcharts/lib/axes'\nimport { EdgeIndicator } from 'react-stockcharts/lib/coordinates'\nimport { discontinuousTimeScaleProvider } from 'react-stockcharts/lib/scale'\nimport { HoverTooltip } from 'react-stockcharts/lib/tooltip'\nimport { ema } from 'react-stockcharts/lib/indicator'\nimport { fitWidth } from 'react-stockcharts/lib/helper'\nimport { last } from 'react-stockcharts/lib/utils'\n\n// More charts here:\n// https://github.com/rrag/react-stockcharts-examples2\n// https://codesandbox.io/s/github/rrag/react-stockcharts-examples2/tree/master/examples/CandleStickChartWithHoverTooltip?file=/src/Chart.js\n// https://codesandbox.io/s/github/rrag/react-stockcharts-examples2/tree/master/examples/CandleStickChartWithInteractiveIndicator?file=/src/Chart.js\n\nconst dateFormat = timeFormat('%Y-%m-%d %H:%M')\nconst numberFormat = format('.2f')\n\nconst tooltipContent = (ys) => {\n\treturn ({ currentItem, xAccessor }) => {\n\t\treturn {\n\t\t\tx: dateFormat(xAccessor(currentItem)),\n\t\t\ty: [{\n\t\t\t\t\tlabel: 'open',\n\t\t\t\t\tvalue: currentItem.open && numberFormat(currentItem.open)\n\t\t\t\t}, {\n\t\t\t\t\tlabel: 'high',\n\t\t\t\t\tvalue: currentItem.high && numberFormat(currentItem.high)\n\t\t\t\t}, {\n\t\t\t\t\tlabel: 'low',\n\t\t\t\t\tvalue: currentItem.low && numberFormat(currentItem.low)\n\t\t\t\t}, {\n\t\t\t\t\tlabel: 'close',\n\t\t\t\t\tvalue: currentItem.close && numberFormat(currentItem.close)\n\t\t\t\t}].concat(\n\t\t\t\t\tys.map(each => ({\n\t\t\t\t\t\tlabel: each.label,\n\t\t\t\t\t\tvalue: each.value(currentItem),\n\t\t\t\t\t\tstroke: each.stroke\n\t\t\t\t\t}))\n\t\t\t\t).filter(line => line.value)\n\t\t}\n\t}\n}\n\nconst ema20 = ema()\n  .id(0)\n  .options({ windowSize: 20 })\n  .merge((d, c) => { d.ema20 = c })\n  .accessor(d => d.ema20)\n\nconst ema50 = ema()\n  .id(2)\n  .options({ windowSize: 50 })\n  .merge((d, c) => { d.ema50 = c })\n  .accessor(d => d.ema50)\n\nconst xScaleProvider =\n  discontinuousTimeScaleProvider\n    .inputDateAccessor(d => d.date)\n\nconst CandleChart = props => {\n  const calculatedData = ema50(ema20(props.realData))\n\n  const { data, xScale, xAccessor, displayXAccessor } = xScaleProvider(\n    calculatedData\n  )\n\n  // TODO: -150 - pull the history data?\n  const start = xAccessor(last(data))\n  // the window is at most 150 records\n  const e = (data.length - 150) > 0 ? (data.length - 150) : data.length - data.length\n  const end = xAccessor(data[Math.max(0, e)])\n\n  if (props.realData.length < 3) {\n    // console.log('realData < 3 wait')\n    return <h3>Not enough data.</h3>\n  }\n\n  // TODO: Make it config via props, time frame - 1min, 5min, 30min, 1H, 6H, 12H, 1D, 1M etc.\n  // EMA - 50, 200,\n  // VOLUME\n  // console.log('realData > 3 render chart!')\n  return (\n    <>\n      <h3 style={{paddingLeft: '50px'}}>{props.title} {props.realData[props.realData.length - 1].close}</h3>\n      <ChartCanvas\n        height={400}\n        width={props.width}\n        ratio={props.ratio}\n        margin={{ left: 80, right: 80, top: 30, bottom: 50 }}\n        type={'hybrid'}\n        seriesName='MSFT'\n        data={data}\n        xScale={xScale}\n        xAccessor={xAccessor}\n        displayXAccessor={displayXAccessor}\n        xExtents={[start, end]}>\n        <Chart\n          id={1}\n          yExtents={[d => [d.high, d.low], ema20.accessor(), ema50.accessor()]}\n          padding={{ top: 10, bottom: 20 }}>\n\n          <XAxis axisAt='bottom' orient='bottom' />\n          <YAxis axisAt='right' orient='right' ticks={5} />\n\n          <CandlestickSeries />\n\n          <LineSeries yAccessor={ema20.accessor()} stroke={ema20.stroke()} />\n          <LineSeries yAccessor={ema50.accessor()} stroke={ema50.stroke()} />\n\n          <EdgeIndicator\n            itemType='last'\n            orient='right'\n            edgeAt='right'\n            yAccessor={d => d.close}\n            fill={d => (d.close > d.open ? '#6BA583' : '#FF0000')}\n          />\n\n          <HoverTooltip\n            yAccessor={ema50.accessor()}\n            tooltipContent={tooltipContent(\n              [{\n                label: `${ema20.type()}(${ema20.options().windowSize})`,\n                value: d => numberFormat(ema20.accessor()(d)),\n                stroke: ema20.stroke()\n              }, {\n                label: `${ema50.type()}(${ema50.options().windowSize})`,\n                value: d => numberFormat(ema50.accessor()(d)),\n                stroke: ema50.stroke()\n              }])}\n            fontSize={15}\n          />\n        </Chart>\n        {/* Volume bar chart */}\n        {/* <Chart\n          id={2}\n          yExtents={[d => d.volume]}\n          height={150}\n          origin={(w, h) => [0, h - 150]}\n        >\n          <YAxis\n            axisAt='left'\n            orient='left'\n            ticks={5}\n            tickFormat={format('.2s')}\n          />\n\n          <BarSeries\n            yAccessor={d => d.volume}\n            fill={d => (d.close > d.open ? '#6BA583' : '#FF0000')}\n          />\n        </Chart> */}\n      </ChartCanvas>\n    </>\n  )\n}\n\nexport default fitWidth(CandleChart)\n","import React from 'react'\n// import logo from './logo.svg'\nimport './App.css'\nimport Kuna from './Kuna'\n\nfunction App(props) {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        {/* <img src={logo} className='App-logo' alt='logo' /> */}\n        <h1 style={{textAlign: 'center'}}>\n          Trading Signals 🚦\n        </h1>\n        \n        {/* <Kuna /> */}\n     </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}